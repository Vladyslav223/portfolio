{"version":3,"sources":["components/App/App.jsx","store/actions.js","components/App/index.js","reducers/data.js","reducers/filters.js","reducers/filteredCat.js","reducers/finish.js","reducers/index.js","store/store.js","index.jsx"],"names":["App","props","useEffect","startLoading","className","src","ACTION_TYPES","START_LOADING","mapDispatchToProps","type","connect","RECEIVE_CATEGORIES","state","data","RECEIVE_FILTERS","filters","APPLY_FILTERS","filteredCat","FINISH_LOADING","isLoading","createRootReducer","combineReducers","form","formReducer","finish","sagaMiddleware","createSagaMiddleware","store","createStore","composeWithDevTools","applyMiddleware","ReactDOM","render","document","getElementById"],"mappings":"0JA2BeA,G,MAlBH,SAACC,GAKX,OAJAC,qBAAU,WACRD,EAAME,kBAIN,yBAAKC,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,QACf,yBAAKA,UAAU,QACf,yBAAKA,UAAU,WACf,yBAAKC,IAAI,iBCnBJC,EAEM,kBAFNA,EAGS,qBAHTA,EAII,gBAJJA,EAKK,iBAIhBC,EARe,gBCEXC,EAAqB,CACzBL,aDY0B,iBAAO,CAAEM,KAAMF,KCT5BG,cACb,KACAF,EAFaE,CAGbV,G,gCCTMW,EAAuBL,EAEhB,aAAiC,IAAhCM,EAA+B,uDAAvB,GAAuB,yCAAjBH,EAAiB,EAAjBA,KAAMI,EAAW,EAAXA,KAClC,OAAQJ,GACN,KAAKE,EACH,OAAOE,EACT,QACE,OAAOD,ICPLE,EAAoBR,EAEb,aAAoC,IAAnCM,EAAkC,uDAA1B,GAA0B,yCAApBH,EAAoB,EAApBA,KAAMM,EAAc,EAAdA,QAClC,OAAQN,GACN,KAAKK,EACH,OAAOC,EAET,QACE,OAAOH,ICRLI,EAAkBV,EAEX,aAAwC,IAAvCM,EAAsC,uDAA9B,GAA8B,yCAAxBH,EAAwB,EAAxBA,KAAMQ,EAAkB,EAAlBA,YAClC,OAAQR,GACN,KAAKO,EACH,OAAOC,EACT,QACE,OAAOL,I,QCPLM,EAAmBZ,EAEZ,aAA4C,IAA3CM,EAA0C,uDAAlC,CAAEO,WAAW,GAAqB,yCAAXV,EAAW,EAAXA,KAC7C,OAAQA,GACN,KAAKS,EACH,OAAO,eACFN,EADL,CAEEO,WAAW,IAGf,QACE,OAAOP,ICEEQ,EARW,kBAAMC,0BAAgB,CAC9CN,UACAF,OACAI,cACAK,KAAMC,IACNC,YCLIC,EAAiBC,cAWRC,EATDC,sBACZR,IACAS,8BACEC,0BAAgBL,KCLpBM,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OACWM,SAASC,eAAe,U","file":"static/js/main.3464a008.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\n// import 'normalize.css';\n// import Header from '../Header/index';\n// import Content from '../Content';\n\nimport './App.scss';\n\nconst App = (props) => {\n  useEffect(() => {\n    props.startLoading();\n  });\n\n  return (\n    <div className=\"App\">\n      <div className=\"flex-wrap\">\n        <div className=\"pen\" />\n        <div className=\"cup\" />\n        <div className=\"flower\" />\n        <img src=\"/fon.jpg\" />\n        {/* <Content /> */}\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n\nApp.propTypes = {\n  startLoading: PropTypes.func.isRequired,\n};\n","\nexport const ACTION_TYPES = {\n  START_LOADING: 'START_LOADING',\n  RECEIVE_FILTERS: 'RECEIVE_FILTERS',\n  RECEIVE_CATEGORIES: 'RECEIVE_CATEGORIES',\n  APPLY_FILTERS: 'APPLY_FILTERS',\n  FINISH_LOADING: 'FINISH_LOADING',\n};\n\nconst {\n  START_LOADING,\n  RECEIVE_FILTERS,\n  RECEIVE_CATEGORIES,\n  APPLY_FILTERS,\n  FINISH_LOADING,\n} = ACTION_TYPES;\n\nexport const startLoading = () => ({ type: START_LOADING });\nexport const recievFilters = (filters) => ({ type: RECEIVE_FILTERS, filters });\nexport const recievCategories = (data) => ({ type: RECEIVE_CATEGORIES, data });\nexport const handleApply = (filteredCat) => ({ type: APPLY_FILTERS, filteredCat });\nexport const finishLoading = () => ({ type: FINISH_LOADING });\n","import { connect } from 'react-redux';\nimport App from './App';\nimport { startLoading } from '../../store/actions';\n\nconst mapDispatchToProps = {\n  startLoading,\n};\n\nexport default connect(\n  null,\n  mapDispatchToProps,\n)(App);\n","import { ACTION_TYPES } from '../store/actions';\n\nconst { RECEIVE_CATEGORIES } = ACTION_TYPES;\n\nexport default (state = {}, { type, data }) => {\n  switch (type) {\n    case RECEIVE_CATEGORIES:\n      return data;\n    default:\n      return state;\n  }\n};\n","import { ACTION_TYPES } from '../store/actions';\n\nconst { RECEIVE_FILTERS } = ACTION_TYPES;\n\nexport default (state = {}, { type, filters }) => {\n  switch (type) {\n    case RECEIVE_FILTERS:\n      return filters;\n\n    default:\n      return state;\n  }\n};\n","import { ACTION_TYPES } from '../store/actions';\n\nconst { APPLY_FILTERS } = ACTION_TYPES;\n\nexport default (state = {}, { type, filteredCat }) => {\n  switch (type) {\n    case APPLY_FILTERS:\n      return filteredCat;\n    default:\n      return state;\n  }\n};\n","import { ACTION_TYPES } from '../store/actions';\n\nconst { FINISH_LOADING } = ACTION_TYPES;\n\nexport default (state = { isLoading: true }, { type }) => {\n  switch (type) {\n    case FINISH_LOADING:\n      return {\n        ...state,\n        isLoading: false,\n      };\n\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { reducer as formReducer } from 'redux-form';\nimport data from './data';\nimport filters from './filters';\nimport filteredCat from './filteredCat';\nimport finish from './finish';\n\nconst createRootReducer = () => combineReducers({\n  filters,\n  data,\n  filteredCat,\n  form: formReducer,\n  finish,\n});\n\nexport default createRootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\nimport createRootReducer from '../reducers';\n// import mySaga from '../sagas/saga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nconst store = createStore(\n  createRootReducer(),\n  composeWithDevTools(\n    applyMiddleware(sagaMiddleware),\n  ),\n);\n\n// sagaMiddleware.run(mySaga);\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport App from './components/App';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>, document.getElementById('root'),\n);\n"],"sourceRoot":""}